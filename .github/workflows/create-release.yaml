name: Create Release

on:
  workflow_dispatch:
    branches:
      - main

env:
  XOJO_PROJECT_FILE: Xojo-GitHub-Actions.xojo_project

jobs:
  setup:
    name: Setup GitHub Workspace
    runs-on: [self-hosted, macOS, Xojo]
    steps:
      - name: Cleanup GitHub Workspace
        run: |
          rm -rf "${{ github.workspace }}"
          sync
          mkdir -p "${{ github.workspace }}"
      - name: Check out Repository
        uses: actions/checkout@v4

  project-version:
    name: Project Version
    runs-on: [self-hosted, macOS, Xojo]
    needs: setup
    outputs:
      version-tag: ${{ steps.project-version.outputs.version-tag }}
    steps:
      - name: Get Xojo Project Version
        id: project-version
        run: |
          VERSION_MAJOR=$(grep -o "MajorVersion=.*" "${{ github.workspace }}/${{ env.XOJO_PROJECT_FILE }}" | awk -F'=' '{print $2}')
          VERSION_MINOR=$(grep -o "MinorVersion=.*" "${{ github.workspace }}/${{ env.XOJO_PROJECT_FILE }}" | awk -F'=' '{print $2}')
          VERSION_SUB=$(grep -o "SubVersion=.*" "${{ github.workspace }}/${{ env.XOJO_PROJECT_FILE }}" | awk -F'=' '{print $2}')
          VERSION=$VERSION_MAJOR.$VERSION_MINOR.$VERSION_SUB
          VERSION_TAG=v.$VERSION
          echo "Xojo Project Version: $VERSION"
          echo "Version Tag: $VERSION_TAG"
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV
          echo "version-tag=$VERSION_TAG" >> $GITHUB_OUTPUT
      - name: Check Release Version Tag
        id: github-tag
        uses: actions/github-script@v7
        with:
          script: |
            try {
              console.log('Check: Expect that Tag ${{ env.VERSION_TAG }} does not exist');
              const getRefResponse = await github.rest.git.getRef({
                owner: context.repo.owner,
                ref: "tags/${{ env.VERSION_TAG }}",
                repo: context.repo.repo,
              });
              // console.log(getRefResponse);
              if (getRefResponse.status === 200) {
                console.log('Tag ${{ env.VERSION_TAG }} exists');
                core.setFailed('Tag ${{ env.VERSION_TAG }} already exists. Xojo Project Version needs to be changed.');
              } else {
                console.log('Tag ${{ env.VERSION_TAG }} does not exist');
              }
            } catch(error) {
              console.log('Tag ${{ env.VERSION_TAG }} does not exist');
            }

  xojo:
    name: Xojo
    uses: ./.github/workflows/xojo.yaml
    needs: [setup, project-version]
    with:
      build-windows-x86-32bit: true
      build-windows-x86-64bit: true
      build-linux-x86-32bit: true
      build-linux-x86-64bit: true
      build-macos-universal: true
      build-stage-code: final
      artifacts-retention-days: 7
    secrets:
      MACOS_CODESIGN_IDENT: ${{ secrets.MACOS_CODESIGN_IDENT }}
      MACOS_CODESIGN_CERTIFICATE: ${{ secrets.MACOS_CODESIGN_CERTIFICATE }}
      MACOS_CODESIGN_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CODESIGN_CERTIFICATE_PASSWORD }}
      MACOS_CODESIGN_KEYCHAIN_PASSWORD: ${{ secrets.MACOS_CODESIGN_KEYCHAIN_PASSWORD }}
      MACOS_NOTARIZATION_ACCOUNT: ${{ secrets.MACOS_NOTARIZATION_ACCOUNT }}
      MACOS_NOTARIZATION_TEAMID: ${{ secrets.MACOS_NOTARIZATION_TEAMID }}
      MACOS_NOTARIZATION_APPSPECIFIC_PASSWORD: ${{ secrets.MACOS_NOTARIZATION_APPSPECIFIC_PASSWORD }}
      WINDOWS_CODESIGN_AZURE_TENANT_ID: ${{ secrets.WINDOWS_CODESIGN_AZURE_TENANT_ID }}
      WINDOWS_CODESIGN_AZURE_CLIENT_ID: ${{ secrets.WINDOWS_CODESIGN_AZURE_CLIENT_ID }}
      WINDOWS_CODESIGN_AZURE_CLIENT_SECRET: ${{ secrets.WINDOWS_CODESIGN_AZURE_CLIENT_SECRET }}
      WINDOWS_CODESIGN_ACS_JSON: ${{ secrets.WINDOWS_CODESIGN_ACS_JSON }}

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [project-version, xojo]
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      BUILDS_FOLDER: ${{ github.workspace }}/_BUILDS
    steps:
      - name: Check out Repository
        uses: actions/checkout@v4
      - name: Create Builds Folder
        run: |
          mkdir -p ${{ env.BUILDS_FOLDER }}
      - name: Download Builds
        uses: actions/download-artifact@v4
        with:
          name: Builds
          path: ${{ env.BUILDS_FOLDER }}
      - name: Create Release as Draft
        working-directory: ${{ github.workspace }}
        run: |
          gh release create ${{ needs.project-version.outputs.version-tag }} --generate-notes --draft=true
      - name: Wait until Draft Release is available
        working-directory: ${{ github.workspace }}
        shell: bash {0}
        run: |
          for i in {1..10}
          do
            gh release view ${{ needs.project-version.outputs.version-tag }}
            if [ $? -eq 0 ]; then
              echo "Draft Release is ready"
              exit 0
            fi
            echo "Draft Release is not ready yet"
            sleep 1
          done
          echo "Draft Release not found in 10 attempts"
          exit 1
      - name: Upload Linux 32Bit .tgz release asset
        if: ${{ needs.xojo.outputs.build-linux-x86-32bit == 'done'}}
        working-directory: ${{ env.BUILDS_FOLDER }}
        run: |
          gh release upload ${{ needs.project-version.outputs.version-tag }} "${{ needs.xojo.outputs.build-linux-x86-32bit-tgz-asset }}#${{ needs.xojo.outputs.build-linux-x86-32bit-tgz-name }}"
      - name: Upload Linux 64Bit .tgz release asset
        if: ${{ needs.xojo.outputs.build-linux-x86-64bit == 'done'}}
        working-directory: ${{ env.BUILDS_FOLDER }}
        run: |
          gh release upload ${{ needs.project-version.outputs.version-tag }} "${{ needs.xojo.outputs.build-linux-x86-64bit-tgz-asset }}#${{ needs.xojo.outputs.build-linux-x86-64bit-tgz-name }}"
      - name: Upload Windows 32Bit .zip release asset
        if: ${{ needs.xojo.outputs.build-windows-x86-32bit == 'done'}}
        working-directory: ${{ env.BUILDS_FOLDER }}
        run: |
          gh release upload ${{ needs.project-version.outputs.version-tag }} "${{ needs.xojo.outputs.build-windows-x86-32bit-zip-asset }}#${{ needs.xojo.outputs.build-windows-x86-32bit-zip-name }}"
      - name: Upload Windows 32Bit setup release asset
        if: ${{ needs.xojo.outputs.build-windows-x86-32bit == 'done'}}
        working-directory: ${{ env.BUILDS_FOLDER }}
        run: |
          gh release upload ${{ needs.project-version.outputs.version-tag }} "${{ needs.xojo.outputs.build-windows-x86-32bit-setup-asset }}#${{ needs.xojo.outputs.build-windows-x86-32bit-setup-name }}"
      - name: Upload Windows 64Bit .zip release asset
        if: ${{ needs.xojo.outputs.build-windows-x86-64bit == 'done'}}
        working-directory: ${{ env.BUILDS_FOLDER }}
        run: |
          gh release upload ${{ needs.project-version.outputs.version-tag }} "${{ needs.xojo.outputs.build-windows-x86-64bit-zip-asset }}#${{ needs.xojo.outputs.build-windows-x86-64bit-zip-name }}"
      - name: Upload Windows 64Bit setup release asset
        if: ${{ needs.xojo.outputs.build-windows-x86-64bit == 'done'}}
        working-directory: ${{ env.BUILDS_FOLDER }}
        run: |
          gh release upload ${{ needs.project-version.outputs.version-tag }} "${{ needs.xojo.outputs.build-windows-x86-64bit-setup-asset }}#${{ needs.xojo.outputs.build-windows-x86-64bit-setup-name }}"
      - name: Upload macOS Universal .dmg release asset
        if: ${{ needs.xojo.outputs.build-macos-universal == 'done'}}
        working-directory: ${{ env.BUILDS_FOLDER }}
        run: |
          gh release upload ${{ needs.project-version.outputs.version-tag }} "${{ needs.xojo.outputs.build-macos-universal-dmg-asset }}#${{ needs.xojo.outputs.build-macos-universal-dmg-name }}"
      - name: Upload macOS Universal .zip release asset
        if: ${{ needs.xojo.outputs.build-macos-universal == 'done'}}
        working-directory: ${{ env.BUILDS_FOLDER }}
        run: |
          gh release upload ${{ needs.project-version.outputs.version-tag }} "${{ needs.xojo.outputs.build-macos-universal-zip-asset }}#${{ needs.xojo.outputs.build-macos-universal-zip-name }}"
      - name: Publish Release
        working-directory: ${{ github.workspace }}
        run: |
          gh release edit ${{ needs.project-version.outputs.version-tag }} --draft=false
      - name: Delete Release in case of a failure
        if: ${{ failure() }}
        working-directory: ${{ github.workspace }}
        run: |
          gh release delete ${{ needs.project-version.outputs.version-tag }} --yes
